buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

version = mod_version
group = mod_package_name
archivesBaseName = mod_id

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: "${mappings_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${mod_minecraft_version}-${forge_version}"
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_name,
            "Specification-Vendor": mod_vendor,
            "Specification-Version": "1",
            "Implementation-Title": mod_name,
            "Implementation-Version": mod_version,
            "Implementation-Vendor" :mod_vendor,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// from advanced mining dimension, this seems to expand gradle.properties values in mods.toml
processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.toml'

        expand 'mod_id': mod_id,
                'mod_version': mod_version,
                'mod_vendor': mod_vendor,
                'mod_name': mod_name,
                'mod_forge_version': mod_forge_version,
                'mod_loader_version': mod_loader_version,
                'mod_minecraft_version': mod_minecraft_version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.toml'
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}